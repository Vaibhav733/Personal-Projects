# -*- coding: utf-8 -*-
"""Personal_projects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oVVd3fFHz1CJjoxhd8RiwHDdTAyRkv1Y

**Image Compression K-means** \\
In this project, K_means algorithm is used to get lossy image compression.
"""

from skimage import io
from sklearn.cluster import KMeans
import numpy as np
from matplotlib import pyplot as plt

# reading an image
old_image = io.imread('original_file_location')

# preprocessing
rows, cols = old_image.shape[0], old_image.shape[1]
image = old_image.reshape(rows * cols, 3)

# Modelling
Kmeans = KMeans(n_clusters = 6)
Kmeans.fit(image)

# getting centers and labels
centers = np.asarray(Kmeans.cluster_centers_, dtype=np.uint8)
labels = np.asarray(Kmeans.labels_, dtype = np.uint8)
labels = np.reshape(labels, (rows, cols))
labels = np.reshape(labels, (rows, cols))

# reconstructing the image
newImage = np.zeros((rows, cols, 3), dtype=np.uint8)
for i in range(rows):
    for j in range(cols):
            # assinging every pixel the rgb color of their label's center
            newImage[i, j, :] = centers[labels[i, j], :]

io.imsave('new_file_location', newImage)

# Plotting
fig = plt.figure(figsize=[15, 15])
ax1 = fig.add_subplot(121)
ax1.imshow(old_image)
ax1.set_title('Original Image', fontdict={'fontsize':15})
ax1.axis('off')
ax2 = fig.add_subplot(122)
ax2.imshow(newImage)
ax2.set_title('Compressed Image', fontdict={'fontsize':15})
ax2.axis('off')
plt.show()